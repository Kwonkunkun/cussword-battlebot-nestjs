import { Injectable, Logger } from '@nestjs/common';
import { Cron } from '@nestjs/schedule';
import { ServiceService } from '../service/service.service';
import { MyService } from '../../constant';
import { UserServiceEntity } from '../../typeorm/entities/user-service.entity';
import { InjectRepository } from '@nestjs/typeorm';
import { DataSource, Repository } from 'typeorm';
import { UserService } from '../user/user.service';
import {
  InjectSlackClient,
  SlackClient,
} from '@int31302/nestjs-slack-listener';
import { UserEntity } from '../../typeorm/entities/user.entity';

@Injectable()
export class TierService {
  private readonly logger = new Logger(TierService.name);

  constructor(
    @InjectRepository(UserServiceEntity)
    private readonly userRepository: Repository<UserEntity>,
    @InjectRepository(UserServiceEntity)
    private readonly userServiceRepository: Repository<UserServiceEntity>,
    @InjectSlackClient()
    private readonly slack: SlackClient,
    private readonly serviceService: ServiceService,
    private readonly userService: UserService,
    private readonly dataSource: DataSource,
  ) {}

  /**
   * @description slash command (/Ìã∞Ïñ¥) Î•º Ï≤òÎ¶¨ÌïúÎã§.
   */
  async slashCommand(username: string, userId: string, channelId: string) {
    this.logger.debug('start slash command');

    //Ïú†Ï†Ä ÎîîÎπÑÏóê ÏûàÎäî Ïú†Ï†ÄÏù∏ÏßÄ ÌôïÏù∏
    const isUser = await this.userService.isUser(userId);
    if (!isUser) {
      await this.userService.createNewUser(userId, username, channelId);
    }

    //Ìï¥Îãπ Ïú†Ï†ÄÏùò tier Î•º Í∞ÄÏ†∏Ïò®Îã§.
    const tier = await this.getTier(userId);

    // tier Ïóê Îî∞ÎùºÏÑú Îã§Î•∏ Î©îÏÑ∏ÏßÄÎ•º Î≥¥ÎÇ∏Îã§.
    const message =
      tier === 'gold'
        ? `ü•á ÏôÄÏö∞! ${username}ÎãòÏùò Ìã∞Ïñ¥Îäî ${tier}ÏûÖÎãàÎã§!!`
        : tier === 'silver'
        ? `ü•à ${username}ÎãòÏùò Ìã∞Ïñ¥Îäî ${tier}ÏûÖÎãàÎã§.`
        : `üí© Ïö∞~ üëé ${username}ÎãòÏùò Ìã∞Ïñ¥Îäî ${tier}Ïù¥ÎÑ§Ïó¨.. Î∂ÑÎ∞úÏ†ê`;

    return {
      text: message,
    };
  }

  /**
   * TODO: ÏùºÎã® ÏöïÏóê ÎåÄÌïú tier Î•º Í∞ÄÏ†∏Ïò§Îäî Í≤ÉÏúºÎ°ú Íµ¨ÌòÑÌñàÎäîÎç∞, Ï∂îÌõÑÏóêÎäî ÏÑúÎπÑÏä§Î≥ÑÎ°ú tier Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏûàÎèÑÎ°ù ÏàòÏ†ïÌï¥ÏïºÌï®.
   * @description Ìï¥Îãπ Ïú†Ï†ÄÏùò tier Î•º Í∞ÄÏ†∏Ïò®Îã§.
   */
  async getTier(userId: string) {
    const user = await this.userServiceRepository.findOne({
      where: { userId: userId, serviceId: 'cussword' },
    });

    return user.tier;
  }

  /**
   * @description Í∞Å ÏÑúÎπÑÏä§Î≥Ñ tier Ïóê ÎåÄÌïú Í≥ÑÏÇ∞ , Îß§Ï£º ÏõîÏöîÏùº Ïò§Ï†Ñ 9ÏãúÏóê Ïã§Ìñâ
   */
  @Cron('0 0 9 * * 1')
  async handleCron() {
    this.logger.debug('start cron job');

    //TODO: ÏùºÎã® ÏöïÏóê ÎåÄÌïú Ìã∞Ïñ¥Îßå Í≥ÑÏÇ∞
    //Í∞Å ÏÑúÎπÑÏä§Î≥ÑÎ°ú tier Î•º Í≥ÑÏÇ∞ÌïúÎã§.
    await this.calculateTier('cussword');
    // await this.calculateTier('emergency');
    // await this.calculateTier('other');

    //Í∞Å ÏÑúÎπÑÏä§Ïóê ÎåÄÌïú count Î•º 0ÏúºÎ°ú Ï¥àÍ∏∞ÌôîÌïúÎã§.
    await this.resetCount();

    //cron job Ïù¥ ÎÅùÎÇòÎ©¥, Î™®Îì† Ïú†Ï†ÄÏóêÍ≤å slack Ïóê Ìã∞Ïñ¥ Ï†ïÏÇ∞Ïù¥ ÎêòÏóàÎã§Îäî Î©îÏÑ∏ÏßÄÎ•º Î≥¥ÎÇ¥Í∏∞.
    await this.sendTierMessageForAllUser();

    this.logger.debug('finish cron job');
  }

  /**
   * @description
   */
  async sendTierMessageForAllUser() {
    //Î™®Îì† Ïú†Ï†ÄÎ•º Í∞ÄÏ†∏Ïò®Îã§.
    const users = await this.userRepository.find();

    //Î™®Îì† Ïú†Ï†ÄÏóêÍ≤å slack Ïóê Ìã∞Ïñ¥ Ï†ïÏÇ∞Ïù¥ ÎêòÏóàÎã§Îäî Î©îÏÑ∏ÏßÄÎ•º Î≥¥ÎÇ∏Îã§.
    const promises = users.map(async ({ username, channel }) => {
      const message = `üéâ ${username}ÎãòÏùò Ìã∞Ïñ¥Í∞Ä Ï†ïÏÇ∞ÎêòÏóàÏäµÎãàÎã§. üéâ`;
      await this.slack.chat.postMessage({
        channel: channel,
        text: message,
      });
    });
    await Promise.all(promises);
  }

  /**
   * @description ÏÑúÎπÑÏä§Î≥Ñ tier Ïóê ÎåÄÌïú Í≥ÑÏÇ∞ Î∞è ÏóÖÎç∞Ïù¥Ìä∏
   */
  async calculateTier(serviceId: MyService) {
    /**
     * ÏÉÅÏúÑ 10%: gold
     * ÏÉÅÏúÑ 30%: silver
     * ÎÇòÎ®∏ÏßÄ: bronze
     */

    //Í∞Å ÏÑúÎπÑÏä§Î≥Ñ user Ïùò count Î•º Í∞ÄÏ†∏Ïò®Îã§. user Îäî count Ïò§Î¶ÑÏ∞®ÏàúÏúºÎ°ú Ï†ïÎ†¨ÎêòÏñ¥ÏûàÎã§.
    const service = await this.serviceService.getService(serviceId);
    const numOfTotalUser = service.users.length;

    //Í∞Å tier Ïóê ÎåÄÌïú Í≥ÑÏÇ∞ÏùÑ Ïã§ÏãúÌïúÎã§.
    const goldTierUsers = service.users.slice(
      0,
      Math.ceil(numOfTotalUser * 0.1),
    );

    const silverTierUsers = service.users.slice(
      Math.ceil(numOfTotalUser * 0.1),
      Math.ceil(numOfTotalUser * 0.4),
    );

    const bronzeTierUsers = service.users.slice(
      Math.ceil(numOfTotalUser * 0.4),
      numOfTotalUser,
    );

    //query builder Î•º ÏÇ¨Ïö©ÌïòÏó¨ Í∞Å ÏÑúÎπÑÏä§Ïùò tier Î•º ÌïúÎ≤àÏóê ÏóÖÎç∞Ïù¥Ìä∏ ÌïúÎã§.
    await this.dataSource.transaction(async (manager) => {
      //gold tier ÏóÖÎç∞Ïù¥Ìä∏
      await manager
        .createQueryBuilder()
        .update(UserServiceEntity)
        .set({
          tier: 'gold',
        })
        .where('userId IN (:...ids)', {
          ids: goldTierUsers.map((user) => user.userId),
        })
        .andWhere('serviceId = :serviceId', { serviceId: serviceId })
        .execute();

      //silver tier ÏóÖÎç∞Ïù¥Ìä∏
      await manager
        .createQueryBuilder()
        .update(UserServiceEntity)
        .set({
          tier: 'silver',
        })
        .where('userId IN (:...ids)', {
          ids: silverTierUsers.map((user) => user.userId),
        })
        .andWhere('serviceId = :serviceId', { serviceId: serviceId })
        .execute();

      //bronze tier ÏóÖÎç∞Ïù¥Ìä∏
      await manager
        .createQueryBuilder()
        .update(UserServiceEntity)
        .set({
          tier: 'bronze',
        })
        .where('userId IN (:...ids)', {
          ids: bronzeTierUsers.map((user) => user.userId),
        })
        .andWhere('serviceId = :serviceId', { serviceId: serviceId })
        .execute();
    });

    this.logger.debug(`gold tier users: ${goldTierUsers.length}`);
    this.logger.debug(`silver tier users: ${silverTierUsers.length}`);
    this.logger.debug(`bronze tier users: ${bronzeTierUsers.length}`);
  }

  /**
   * @description Í∞Å ÏÑúÎπÑÏä§Ïóê ÎåÄÌïú count Î•º 0ÏúºÎ°ú Ï¥àÍ∏∞ÌôîÌïúÎã§.
   */
  async resetCount() {
    await this.userServiceRepository
      .createQueryBuilder()
      .update()
      .set({ count: 0 })
      .execute();
  }
}
